/*
 * Generated by the Jasper component of Apache Tomcat
 * Version: Apache Tomcat/8.0.39
 * Generated at: 2017-02-27 12:55:52 UTC
 * Note: The last modified time of this file was set to
 *       the last modified time of the source file after
 *       generation to assist with modification tracking.
 */
package org.apache.jsp;

import javax.servlet.*;
import javax.servlet.http.*;
import javax.servlet.jsp.*;

public final class j06_005fAjax_005fgetXMLHttpRequest_jsp extends org.apache.jasper.runtime.HttpJspBase
    implements org.apache.jasper.runtime.JspSourceDependent,
                 org.apache.jasper.runtime.JspSourceImports {

  private static final javax.servlet.jsp.JspFactory _jspxFactory =
          javax.servlet.jsp.JspFactory.getDefaultFactory();

  private static java.util.Map<java.lang.String,java.lang.Long> _jspx_dependants;

  private static final java.util.Set<java.lang.String> _jspx_imports_packages;

  private static final java.util.Set<java.lang.String> _jspx_imports_classes;

  static {
    _jspx_imports_packages = new java.util.HashSet<>();
    _jspx_imports_packages.add("javax.servlet");
    _jspx_imports_packages.add("javax.servlet.http");
    _jspx_imports_packages.add("javax.servlet.jsp");
    _jspx_imports_classes = null;
  }

  private volatile javax.el.ExpressionFactory _el_expressionfactory;
  private volatile org.apache.tomcat.InstanceManager _jsp_instancemanager;

  public java.util.Map<java.lang.String,java.lang.Long> getDependants() {
    return _jspx_dependants;
  }

  public java.util.Set<java.lang.String> getPackageImports() {
    return _jspx_imports_packages;
  }

  public java.util.Set<java.lang.String> getClassImports() {
    return _jspx_imports_classes;
  }

  public javax.el.ExpressionFactory _jsp_getExpressionFactory() {
    if (_el_expressionfactory == null) {
      synchronized (this) {
        if (_el_expressionfactory == null) {
          _el_expressionfactory = _jspxFactory.getJspApplicationContext(getServletConfig().getServletContext()).getExpressionFactory();
        }
      }
    }
    return _el_expressionfactory;
  }

  public org.apache.tomcat.InstanceManager _jsp_getInstanceManager() {
    if (_jsp_instancemanager == null) {
      synchronized (this) {
        if (_jsp_instancemanager == null) {
          _jsp_instancemanager = org.apache.jasper.runtime.InstanceManagerFactory.getInstanceManager(getServletConfig());
        }
      }
    }
    return _jsp_instancemanager;
  }

  public void _jspInit() {
  }

  public void _jspDestroy() {
  }

  public void _jspService(final javax.servlet.http.HttpServletRequest request, final javax.servlet.http.HttpServletResponse response)
        throws java.io.IOException, javax.servlet.ServletException {

final java.lang.String _jspx_method = request.getMethod();
if (!"GET".equals(_jspx_method) && !"POST".equals(_jspx_method) && !"HEAD".equals(_jspx_method) && !javax.servlet.DispatcherType.ERROR.equals(request.getDispatcherType())) {
response.sendError(HttpServletResponse.SC_METHOD_NOT_ALLOWED, "JSPs only permit GET POST or HEAD");
return;
}

    final javax.servlet.jsp.PageContext pageContext;
    javax.servlet.http.HttpSession session = null;
    final javax.servlet.ServletContext application;
    final javax.servlet.ServletConfig config;
    javax.servlet.jsp.JspWriter out = null;
    final java.lang.Object page = this;
    javax.servlet.jsp.JspWriter _jspx_out = null;
    javax.servlet.jsp.PageContext _jspx_page_context = null;


    try {
      response.setContentType("text/html; charset=UTF-8");
      pageContext = _jspxFactory.getPageContext(this, request, response,
      			null, true, 8192, true);
      _jspx_page_context = pageContext;
      application = pageContext.getServletContext();
      config = pageContext.getServletConfig();
      session = pageContext.getSession();
      out = pageContext.getOut();
      _jspx_out = out;

      out.write("\r\n");
      out.write("<!DOCTYPE html>\r\n");
      out.write("<html>\r\n");
      out.write("  <head>\r\n");
      out.write("    <meta charset=\"UTF-8\"> <title>Insert title here</title>\r\n");
      out.write("  </head>\r\n");
      out.write("  <body>\r\n");
      out.write("\t");
      out.write("\r\n");
      out.write("\t\t<h2>Ajax 이용</h2>\r\n");
      out.write("\t\t\r\n");
      out.write("\t\t<input type=\"button\" \r\n");
      out.write("\t\t\t\tvalue=\"다른 페이지의 내용 가져와서 alert으로 출력\"\r\n");
      out.write("\t\t\t\tonclick=\"getData()\">\r\n");
      out.write("\t\t\t\t\r\n");
      out.write("\t\t<script type=\"text/javascript\">\r\n");
      out.write("\t\t\tvar httpRequest = null;\r\n");
      out.write("\t\t\t\r\n");
      out.write("\t\t\tfunction getXMLHttpRequest() {\r\n");
      out.write("\t\t\t\tif(window.ActiveXObject) {\r\n");
      out.write("\t\t\t\t\ttry {\r\n");
      out.write("\t\t\t\t\t\treturn new ActiveXObject(\"Msxml12.XMLHTTP\");\r\n");
      out.write("\t\t\t\t\t} catch(e) {\r\n");
      out.write("\t\t\t\t\t\ttry {\r\n");
      out.write("\t\t\t\t\t\t\treturn new ActiveXObject(\"Microsoft.XMLHTTP\");\r\n");
      out.write("\t\t\t\t\t\t} catch(e1) {\r\n");
      out.write("\t\t\t\t\t\t\treturn null;\r\n");
      out.write("\t\t\t\t\t\t}\r\n");
      out.write("\t\t\t\t\t}\r\n");
      out.write("\t\t\t\t} else if(window.XMLHttpRequest) {\r\n");
      out.write("\t\t\t\t\treturn new XMLHttpRequest();\r\n");
      out.write("\t\t\t\t} else {\r\n");
      out.write("\t\t\t\t\treturn null;\r\n");
      out.write("\t\t\t\t}\r\n");
      out.write("\t\t\t}\r\n");
      out.write("// \t\t\thttprequest(XMLHttpRequest) 객체의 대표 함수\r\n");
      out.write("// \t\t\t- onreadystatechange :\r\n");
      out.write("// \t\t\t\t이벤트를 처리하는 핸들러 역할(callback 함수에서 구현)\r\n");
      out.write("// \t\t\t- open : 요청 정보 설정 메소드 - method와 url은 필수 요소\r\n");
      out.write("// \t\t\t- send : 요청을 지정한 url로 전송하는 명령\r\n");
      out.write("\r\n");
      out.write("\t\t\tfunction getData() {\r\n");
      out.write("// \t\t\t\t1. httpRequest 객체 획득\r\n");
      out.write("\t\t\t\thttpRequest = getXMLHttpRequest();\r\n");
      out.write("\t\t\t\t\r\n");
      out.write("// \t\t\t\t2. httpRequest 이벤트 리스너 설정\r\n");
      out.write("// \t\t\t\t\t- 다시 돌아온 httpRequest를 받아 처리할\r\n");
      out.write("// \t\t\t\t\t\t핸들러(callback)함수를 지정해야 함.\r\n");
      out.write("// \t\t\t\t\t- 데이터 수신 시 사용\r\n");
      out.write("\t\t\t\thttpRequest.onreadystatechange = callback;\r\n");
      out.write("\t\t\t\t\r\n");
      out.write("// \t\t\t\t3. 요청 작업 내용 설정 : method, url, 파라미터정보 등\r\n");
      out.write("\t\t\t\thttpRequest.open(\"Get\"\r\n");
      out.write("\t\t\t\t\t, \"/Curr11_Ajax_Jquery/j06_viewData.jsp?name=둘리\"\r\n");
      out.write("\t\t\t\t\t, true)\r\n");
      out.write("// \t\t\t\t\t- 비동기(true) / 동기(false) 방식 설정\r\n");
      out.write("// \t\t\t\t\t\t- 비동기 방식인 경우, (날려놓고 나몰라라 진행~ !!)\r\n");
      out.write("// \t\t\t\t\t\t\tsend() 실행 후 기다리지 않고 다음 명령을 계속 실행\r\n");
      out.write("// \t\t\t\t\t\t- 동기 방식인 경우,\r\n");
      out.write("// \t\t\t\t\t\t\t서버와의 통신이 완전히 완료된 후 이후 명령 실행\r\n");
      out.write("\t\t\t\thttpRequest.setRequestHeader(\r\n");
      out.write("\t\t\t\t\t\"Content-Type\", \"application/x-www-form-urlencoded\"\r\n");
      out.write("\t\t\t\t);\r\n");
      out.write("\t\t\t\t\r\n");
      out.write("// \t\t\t\t4. httpRequest 발송\r\n");
      out.write("\t\t\t\thttpRequest.send(null);\r\n");
      out.write("// \t\t\t\t=> post방식인 경우, 넘겨야 할 파라미터 입력\r\n");
      out.write("// \t\t\t\t=> get방식인 경우, null값\r\n");
      out.write("\t\t\t\talert(\"send() - 전송 완료\");\r\n");
      out.write("\t\t\t\t\r\n");
      out.write("\t\t\t}\r\n");
      out.write("\t\t\t\r\n");
      out.write("\t\t\tfunction callback() {\r\n");
      out.write("\t\t\t// 받을려고 대기하는 함수\r\n");
      out.write("\t\t\t\tif(httpRequest.readyState == 4) {\r\n");
      out.write("// \t\t\t\t\t- readyState : XMLHttpRequest의 객체 상태 확인\r\n");
      out.write("// \t\t\t\t\t- 4 : 서버로부터의 응답 성공(전체 데이터 수신 성공)\r\n");
      out.write("\t\t\t\t\t\r\n");
      out.write("\t\t\t\t\tif(httpRequest.status == 200) {\r\n");
      out.write("// \t\t\t\t\t\t- status : 서버로부터 응답받은 http 상태 코드\r\n");
      out.write("// \t\t\t\t\t\t- 200 : 요청에 대한 서버의 처리한 작업이 성공적임\r\n");
      out.write("// \t\t\t\t\t\t\t\t(모든 작업이 순조로웠음을 의미)\r\n");
      out.write("// \t\t\t\t\t\t- 403 : 서버에 대한 접근 거부 (서버에서 안받겠다고 함)\r\n");
      out.write("// \t\t\t\t\t\t- 404 : URL에 지정된 대상 없음\r\n");
      out.write("// \t\t\t\t\t\t- 500 : 서버 작업 중 오류 발생\r\n");
      out.write("\r\n");
      out.write("// \t\t\t\t\t\t[방법 1.]\r\n");
      out.write("\t\t\t\t\t\tvar rcvData = httpRequest.responseText;\r\n");
      out.write("\t\t\t\t\t\talert(\"도착한 데이터 : \" + rcvData);\r\n");
      out.write("// \t\t\t\t\t\t- 서버로부터 응답된 데이터\r\n");
      out.write("// \t\t\t\t\t\t- responseText : 단순 텍스트\r\n");
      out.write("// \t\t\t\t\t\t- responseXML : XML 형식\r\n");
      out.write("\r\n");
      out.write("// \t\t\t\t\t\t##참고##\r\n");
      out.write("// \t\t\t\t\t\t** 공백 제거 함수 : replace(/\\s/g, \"\");\r\n");
      out.write("\t\t\t\t\t\tvar editData = rcvData.replace(/\\s/g, \"\");\r\n");
      out.write("\t\t\t\t\t\talert(editData)\r\n");
      out.write("\t\t\t\t\t\t\r\n");
      out.write("\t\t\t\t\t\t\r\n");
      out.write("\t\t\t\t\t} else {\r\n");
      out.write("\t\t\t\t\t\talert(\"실패 : \" + httpRequest.status)\r\n");
      out.write("\t\t\t\t\t}\r\n");
      out.write("\t\t\t\t}\t\r\n");
      out.write("\t\t\t}\r\n");
      out.write("\t\t\t\r\n");
      out.write("\t\t</script>\r\n");
      out.write("  </body>\r\n");
      out.write("</html>");
    } catch (java.lang.Throwable t) {
      if (!(t instanceof javax.servlet.jsp.SkipPageException)){
        out = _jspx_out;
        if (out != null && out.getBufferSize() != 0)
          try {
            if (response.isCommitted()) {
              out.flush();
            } else {
              out.clearBuffer();
            }
          } catch (java.io.IOException e) {}
        if (_jspx_page_context != null) _jspx_page_context.handlePageException(t);
        else throw new ServletException(t);
      }
    } finally {
      _jspxFactory.releasePageContext(_jspx_page_context);
    }
  }
}
